package com.avalburo.backend.apirest.dao;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Component;

import com.avalburo.backend.apirest.entities.Message;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class MessageDao {
	private static final String FILE_PATH = "forum.json";
    private ObjectMapper objectMapper = new ObjectMapper();
    
    private List<Message> messages;

    private int getNextId(List<Message> messages) {
        int maxId = messages.stream().mapToInt(Message::getId).max().orElse(0);
        return maxId + 1;
    }
    
    private int getNextResponseId(List<Message> responses) {
        int maxId = responses.stream().mapToInt(Message::getId).max().orElse(0);
        return maxId + 1;
    }
    
    public List<Message> findAll() {
        try {
            messages = objectMapper.readValue(new File(FILE_PATH), new TypeReference<List<Message>>() {});
            return messages;
        } catch (IOException e) {
            e.printStackTrace();
            messages = null;
            return new ArrayList<>();
        }
    }

    public Message findById(int id) {
        try {
            messages = objectMapper.readValue(new File(FILE_PATH), new TypeReference<List<Message>>() {});
            Optional<Message> optionalMessage = messages.stream().filter(message -> message.getId() == id).findFirst();
            return optionalMessage.orElse(null);
        } catch (IOException e) {
            messages = null;
            e.printStackTrace();
        }
        return null;
    }
    
    public Message save(Message message) {
        List<Message> messages = findAll();
        int nextId = getNextId(messages);
        message.setId(nextId);
        LocalDateTime currentDateTime = LocalDateTime.now();
        ZonedDateTime ecuadorDateTime = currentDateTime.atZone(ZoneId.systemDefault());
        Timestamp currentTimestamp = Timestamp.from(ecuadorDateTime.toInstant());
        message.setCreatedAt(currentTimestamp);
        messages.add(message);
        try {
            objectMapper.writerWithDefaultPrettyPrinter().writeValue(new File(FILE_PATH), messages);
            return message;
        } catch (IOException e) {
            messages = null;
            e.printStackTrace();
        }
        return null;
    }

    public Message saveResponse(int messageId, Message response) {
        List<Message> messages = findAll();

        Optional<Message> parentOptional = messages.stream()
                .filter(m -> m.getId() == messageId)
                .findFirst();

        if (parentOptional.isPresent()) {
            Message parent = parentOptional.get();
            List<Message> responses = parent.getResponses();
            int nextResponseId = getNextResponseId(responses);
            response.setId(nextResponseId);
            response.setParent(parent);
            if (parent.getResponses() == null) {
            	parent.setResponses(new ArrayList<>());
            }
            parent.getResponses().add(response);
            try {
                objectMapper.writerWithDefaultPrettyPrinter().writeValue(new File(FILE_PATH), messages);
                return response;
            } catch (IOException e) {
                messages = null;
                e.printStackTrace();
            }
        }
        return null;
    }
}
